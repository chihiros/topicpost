version: 3

dotenv:
  - .env.supabase.local

tasks:
  setup:
    desc: Setup Supabase
    cmds:
      - task: supabase/init
      - task: supabase/start
      - task: supabase/status/genenv
      - task: gen
    interactive: true

  start:
    desc: Start Supabase and Docker
    cmds:
      - task: supabase/start
      - task: supabase/status/genenv
      - task: docker/build
      - task: docker/up
      - task: docker/create/network
    interactive: true

  check:
    desc: Check required files and commands
    cmds:
      - task: check/files
      - task: check/commands

  check/files:
    desc: Check required files
    cmds:
      - |
        if [ ! -f .env.supabase.local ]; then
          echo -e "\033[33m[Warning]\033[0m .env.supabase.local is missing."
        else
          echo -e "\033[32m[OK]\033[0m .env.supabase.local exists."
        fi
    silent: true

  check/commands:
    desc: Check required commands
    cmds:
      - cmd: |
          apps=("docker" "go" "goose" "supabase" "wire")
          missing=0
          for app in "${apps[@]}"; do
            if ! command -v "$app" > /dev/null; then
              echo -e "\033[33m[Warning]\033[0m $app is not installed"
              missing=1
            else
              echo -e "\033[32m[OK]\033[0m $app is installed"
            fi
          done

          if [ "$missing" -eq 0 ]; then
            echo -e "\033[32mAll required commands are installed.\033[0m"
          else
            echo -e "\033[31mSome commands are missing.\033[0m"
          fi
    silent: true
    ignore_error: true

  supabase/init:
    desc: Initialize Supabase project
    cmds:
      - supabase init
    interactive: true
    ignore_error: true

  supabase/start:
    desc: Start Supabase
    cmds:
      - supabase start
    interactive: true

  supabase/stop:
    desc: Stop Supabase
    cmds:
      - supabase stop

  supabase/status:
    desc: Check Supabase status
    cmds:
      - supabase status
    interactive: true

  supabase/status/genenv:
    desc: Generate .env from supabase status
    cmds:
      - ./generate_env.sh

  docker/up:
    desc: Start Docker
    cmds:
      - docker compose up -d

  docker/build:
    desc: Build Docker
    cmds:
      - docker compose build

  docker/down:
    desc: Stop Docker
    cmds:
      - docker compose down
      - task: supabase/stop

  docker/create/network:
    desc: Create Docker network
    cmds:
      - docker network connect $(docker network ls | grep "$(basename $(pwd))_default" | awk '{print $2}') supabase_db_supabase-local
    ignore_error: true

  docker/logs:
    desc: Show Docker logs
    cmds:
      - docker logs -f $(docker ps -q --filter "name=$(basename $(pwd))-api")

  gomod/init:
    desc: Initialize go.mod
    dir: app
    cmds:
      - go mod init server

  gomod/tidy:
    desc: Tidy go.mod
    dir: app
    cmds:
      - go mod tidy

  gomod/update:
    desc: Update go.mod
    dir: app
    cmds:
      - go get -u && go mod tidy

  goose/create/migration:
    desc: Create migration
    cmds:
      - |
        if [ "{{.CLI_ARGS}}" = "" ]; then
          echo "ファイル名を指定してください！"
          echo "$ task goose/create/migration -- [ファイル名]"
        else
          goose -dir ./schema/migrations create {{.CLI_ARGS}} sql
        fi

  goose/create/seed:
    desc: Create seed
    cmds:
      - |
        if [ "{{.CLI_ARGS}}" = "" ]; then
          echo "ファイル名を指定してください！"
          echo "$ task goose/create/seed -- [ファイル名]"
        else
          goose -dir ./schema/seeds create {{.CLI_ARGS}} sql
        fi

  goose/migration/status:
    desc: Check migration status
    cmds:
      - goose -dir ./schema/migrations postgres ${SUPABASE_DB_URL} status

  goose/seed/status:
    desc: Check seed status
    cmds:
      - goose -dir ./schema/seeds postgres ${SUPABASE_DB_URL} status

  goose/migration/up:
    desc: Migrate up
    cmds:
      - goose -dir ./schema/migrations postgres ${SUPABASE_DB_URL} up

  goose/migration/down:
    desc: Migrate down
    cmds:
      - goose -dir ./schema/migrations postgres ${SUPABASE_DB_URL} down

  goose/seed/up:
    desc: Seed up
    cmds:
      - goose -dir ./schema/seeds postgres ${SUPABASE_DB_URL} up

  goose/seed/down:
    desc: Seed down
    cmds:
      - goose -dir ./schema/seeds postgres ${SUPABASE_DB_URL} down

  gen:
    desc: ORM ent codegen
    dir: app
    cmds:
      - go generate ./ent

  go/wire:
    desc: Generate wire
    dir: app
    cmds:
      - wire ./di

  go/test:
    desc: Run Go test
    cmds:
      - go test -v ./...

  check/environment:
    desc: "Check OS, OS version, and architecture"
    cmds:
      - cmd: |
          echo -e "\033[34mChecking system information...\033[0m"
          os_name=$(uname -s)
          if [ "$os_name" = "Darwin" ]; then
            echo -e "\033[32mOperating System:\033[0m macOS"
            echo -e "\033[32mOS Version:\033[0m $(sw_vers -productVersion)"
            echo -e "\033[32mArchitecture:\033[0m $(uname -m)"
            echo -e "\033[32mCPU:\033[0m $(sysctl -n machdep.cpu.brand_string)"
          elif [ "$os_name" = "Linux" ]; then
            echo -e "\033[32mOperating System:\033[0m Linux"
            if [ -f /etc/os-release ]; then
              . /etc/os-release
              echo -e "\033[32mOS Version:\033[0m $PRETTY_NAME"
            else
              echo -e "\033[33mOS version information not available\033[0m"
            fi
            echo -e "\033[32mArchitecture:\033[0m $(uname -m)"
            echo -e "\033[32mCPU:\033[0m $(lscpu | grep 'Model name' | awk -F: '{print $2}' | sed 's/^ *//')"
          elif [ "$(uname -o)" = "Msys" ] || [ "$(uname -o)" = "Cygwin" ] || [ "$os_name" = "Windows_NT" ]; then
            echo -e "\033[32mOperating System:\033[0m Windows"
            echo -e "\033[32mOS Version:\033[0m $(wmic os get Caption | grep -v Caption)"
            echo -e "\033[32mArchitecture:\033[0m $(wmic os get osarchitecture | grep -v OSArchitecture)"
            echo -e "\033[32mCPU:\033[0m $(wmic cpu get name | grep -v Name)"
          else
            echo -e "\033[33mUnsupported OS\033[0m"
          fi
    silent: true

  ogen:
    desc: Generate OpenAPI client
    cmds:
      - cmd: "docker run --rm -v $(pwd):/local openapitools/openapi-generator-cli generate -i /local/docs/openapi.yml -g typescript-axios --additional-properties supportsES6=true,withInterfaces=true -o /local/docs/test-generate"
      - cmd: rm -rf docs/test-generate
